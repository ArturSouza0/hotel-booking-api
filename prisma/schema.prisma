generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Pessoa {
  id                     Int               @id @default(autoincrement())
  nome                   String            @db.NVarChar(255)
  sobrenome              String            @db.NVarChar(255)
  email                  String            @unique @db.NVarChar(255)
  senha                  String            @db.NVarChar(255)
  cpf                    String            @unique @db.NVarChar(11)
  ativo                  Boolean?          @default(true)
  numero_contato         String            @db.NVarChar(20)
  endereco               String?           @db.NVarChar(255)
  cidade                 String?           @db.NVarChar(255)
  pais                   String?           @db.NVarChar(255)
  data_nascimento        DateTime?         @db.Date
  comprovante_residencia String?           @db.NVarChar(255)
  nacionalidade          String?           @db.NVarChar(100)
  genero                 String?           @db.NVarChar(50)
  data_criacao           DateTime?         @default(now()) @db.DateTime
  data_atualizacao       DateTime?         @updatedAt
  PessoaPermissao        PessoaPermissao[]
  Reservas               Reserva[]
  Pagamentos             Pagamento[]
}

model Permissao {
  id              Int               @id @default(autoincrement())
  descricao       String            @unique @db.NVarChar(255)
  PessoaPermissao PessoaPermissao[]
}

model PessoaPermissao {
  id           Int        @id @default(autoincrement())
  pessoa_id    Int
  permissao_id Int
  Pessoa       Pessoa     @relation(fields: [pessoa_id], references: [id])
  Permissao    Permissao  @relation(fields: [permissao_id], references: [id])
}

model Reserva {
  id            Int         @id @default(autoincrement())
  pessoa_id     Int
  quarto_id     Int
  data_checkin  DateTime    @db.DateTime
  data_checkout DateTime    @db.DateTime
  status_id     Int
  plano_id      Int
  pessoa        Pessoa      @relation(fields: [pessoa_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Quarto        Quarto      @relation(fields: [quarto_id], references: [id])
  Status        Status      @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Plano         Plano       @relation(fields: [plano_id], references: [id])
  Pagamentos    Pagamento[]
}


model Quarto {
  id             Int         @id @default(autoincrement())
  numero         String      @unique @db.NVarChar(255)
  tipo_quarto_id Int
  id_status      Int
  TipoQuarto     TipoQuarto  @relation(fields: [tipo_quarto_id], references: [id])
  Status         Status      @relation(fields: [id_status], references: [id])
  Reservas       Reserva[]
}

model TipoQuarto {
  id           Int       @id @default(autoincrement())
  descricao    String    @db.NVarChar(255)
  preco_diaria Decimal   @db.Decimal(10, 2)
  Quartos      Quarto[]
}

model Status {
  id        Int       @id @default(autoincrement())
  descricao String    @unique @db.NVarChar(255)
  Quartos   Quarto[]
  Reservas  Reserva[]
}

model Pagamento {
  id                Int            @id @default(autoincrement())
  pessoa_id         Int
  reserva_id        Int
  tipo_pagamento_id Int
  valor             Decimal        @db.Decimal(10, 2)
  data_pagamento    DateTime?      @default(now()) @db.DateTime
  Pessoa            Pessoa         @relation(fields: [pessoa_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Reserva           Reserva        @relation(fields: [reserva_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  TipoPagamento     TipoPagamento  @relation(fields: [tipo_pagamento_id], references: [id])
}

model TipoPagamento {
  id          Int         @id @default(autoincrement())
  descricao   String      @db.NVarChar(255)
  Pagamentos  Pagamento[]
}

model Plano {
  id          Int       @id @default(autoincrement())
  descricao   String    @db.NVarChar(255)
  preco       Decimal   @db.Decimal(10, 2)
  Reservas    Reserva[]
}
