generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model cargo {
  id           Int         @id(map: "PK__cargo__3213E83F0DF41DC5") @default(autoincrement())
  descricao    String         @db.NVarChar(255)
  funcionarios funcionarios[]
}

model clientes {
  id                Int    @id(map: "PK__clientes__3213E83F1B4EA62A") @default(autoincrement())
  pessoa_id         Int?
  numero_fidelidade String?   @db.NVarChar(50)
  observacoes       String?   @db.NVarChar(255)
  pessoa            pessoa?   @relation(fields: [pessoa_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__clientes__pessoa__5165187F")
  reserva           reserva[]
}

model funcionarios {
  id        Int  @id(map: "PK__funciona__3213E83F4C53CA17") @default(autoincrement())
  pessoa_id Int?
  cargo_id  Int?
  cargo     cargo?  @relation(fields: [cargo_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__funcionar__cargo__571DF1D5")
  pessoa    pessoa? @relation(fields: [pessoa_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__funcionar__pesso__5629CD9C")
}

model pagamento {
  id                Int          @id(map: "PK__pagament__3213E83FB4811029") @default(autoincrement())
  reserva_id        Int?
  tipo_pagamento_id Int?
  valor             Decimal         @db.Decimal(10, 2)
  data_pagamento    DateTime?       @default(dbgenerated("sysdatetimeoffset()"), map: "DF__pagamento__data___628FA481") @db.DateTimeOffset
  reserva           reserva?        @relation(fields: [reserva_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__pagamento__reser__60A75C0F")
  tipo_pagamento    tipo_pagamento? @relation(fields: [tipo_pagamento_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__pagamento__tipo___619B8048")
}

model permissoes {
  id               Int             @id(map: "PK__permisso__3213E83F0BFA29D0") @default(autoincrement())
  descricao        String             @unique(map: "UQ__permisso__91D38C2813CA3D68") @db.NVarChar(255)
  pessoa           pessoa[]
  pessoa_permissao pessoa_permissao[]
}

model pessoa {
  id                     Int             @id(map: "PK__pessoa__3213E83F8D3747E6") @default(autoincrement())
  nome                   String             @db.NVarChar(255)
  sobrenome              String             @db.NVarChar(255)
  email                  String             @unique(map: "UQ__pessoa__AB6E61642B83EF8A") @db.NVarChar(255)
  senha                  String             @db.NVarChar(255)
  cpf                    String             @unique(map: "UQ__pessoa__D836E71F3D216C35") @db.NVarChar(11)
  identidade             String?            @unique(map: "UQ__pessoa__D2CB21E3F027E52C") @db.NVarChar(10)
  numero_contato         String             @db.NVarChar(20)
  endereco               String?            @db.NVarChar(255)
  cidade                 String?            @db.NVarChar(255)
  pais                   String?            @db.NVarChar(255)
  comprovante_residencia String?            @db.NVarChar(255)
  outros_documentos      String?            @db.NVarChar(255)
  permissao_id           Int?
  data_nascimento        DateTime?          @db.Date
  genero                 String?            @db.NVarChar(50)
  nacionalidade          String?            @db.NVarChar(100)
  ativo                  Boolean            @default(true, map: "DF__pessoa__ativo__4CA06362")
  data_criacao           DateTime?          @default(dbgenerated("sysdatetimeoffset()"), map: "DF__pessoa__data_cri__4D94879B") @db.DateTimeOffset
  data_atualizacao       DateTime?          @default(dbgenerated("sysdatetimeoffset()"), map: "DF__pessoa__data_atu__4E88ABD4") @db.DateTimeOffset
  clientes               clientes[]
  funcionarios           funcionarios[]
  permissoes             permissoes?        @relation(fields: [permissao_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__pessoa__permissa__4BAC3F29")
  pessoa_permissao       pessoa_permissao[]
}

model pessoa_permissao {
  id           Int      @id(map: "PK__pessoa_p__3213E83F492E3E53") @default(autoincrement())
  pessoa_id    Int?
  permissao_id Int?
  permissoes   permissoes? @relation(fields: [permissao_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__pessoa_pe__permi__6A30C649")
  pessoa       pessoa?     @relation(fields: [pessoa_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__pessoa_pe__pesso__693CA210")
}

model plano_servico {
  id         Int    @id(map: "PK__plano_se__3213E83F1BFE85DF") @default(autoincrement())
  plano_id   Int?
  servico_id Int?
  planos     planos?   @relation(fields: [plano_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__plano_ser__plano__656C112C")
  servicos   servicos? @relation(fields: [servico_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__plano_ser__servi__66603565")
}

model planos {
  id            Int          @id(map: "PK__planos__3213E83F889432A9") @default(autoincrement())
  descricao     String          @db.NVarChar(255)
  preco         Decimal         @db.Decimal(10, 2)
  plano_servico plano_servico[]
  reserva       reserva[]
}

model quarto {
  id             Int       @id(map: "PK__quarto__3213E83F2756B348") @default(autoincrement())
  numero         String       @db.NVarChar(255)
  tipo_quarto_id Int?
  id_status      Int?
  imagem         String?      @db.NVarChar(255)
  status         status?      @relation(fields: [id_status], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__quarto__id_statu__3D5E1FD2")
  tipo_quarto    tipo_quarto? @relation(fields: [tipo_quarto_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__quarto__tipo_qua__3C69FB99")
  reserva        reserva[]
}

model reserva {
  id            Int      @id(map: "PK__reserva__3213E83F36448C49") @default(autoincrement())
  cliente_id    Int?
  quarto_id     Int?
  data_checkin  DateTime    @db.DateTimeOffset
  data_checkout DateTime    @db.DateTimeOffset
  status_id     Int?
  servico_id    Int?
  plano_id      Int?
  pagamento     pagamento[]
  clientes      clientes?   @relation(fields: [cliente_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__reserva__cliente__59FA5E80")
  planos        planos?     @relation(fields: [plano_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__reserva__plano_i__5DCAEF64")
  quarto        quarto?     @relation(fields: [quarto_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__reserva__quarto___5AEE82B9")
  servicos      servicos?   @relation(fields: [servico_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__reserva__servico__5CD6CB2B")
  status        status?     @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__reserva__status___5BE2A6F2")
}

model servicos {
  id            Int          @id(map: "PK__servicos__3213E83F9CC923BA") @default(autoincrement())
  descricao     String          @db.NVarChar(255)
  preco         Decimal         @db.Decimal(10, 2)
  plano_servico plano_servico[]
  reserva       reserva[]
}

model status {
  id        Int    @id(map: "PK__status__3213E83F6DC0B385") @default(autoincrement())
  descricao String    @unique(map: "UQ__status__91D38C28B47BB85D") @db.NVarChar(255)
  quarto    quarto[]
  reserva   reserva[]
}

model tipo_pagamento {
  id        Int      @id(map: "PK__tipo_pag__3213E83F95399F62") @default(autoincrement())
  descricao String      @db.NVarChar(255)
  pagamento pagamento[]
}

model tipo_quarto {
  id           Int   @id(map: "PK__tipo_qua__3213E83F90B34C97") @default(autoincrement())
  descricao    String   @db.NVarChar(255)
  preco_diaria Decimal  @db.Decimal(10, 2)
  quarto       quarto[]
}
